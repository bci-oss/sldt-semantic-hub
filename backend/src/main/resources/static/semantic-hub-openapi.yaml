openapi: 3.0.3
info:
  title: Semantic Hub
  version: v1

security:
  - OpenIdProfile:
      - profile

servers:
  - url: ./api/{api-version}
    variables:
      api-version:
        default: v1
paths:
  /models:
    get:
      tags:
        - SemanticHub
      operationId: getModelList
      parameters:
        - in: query
          name: namespaceFilter
          schema:
            default: ""
            type: string
            description: substring to search in the model`s namespace
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/SemanticModelStatus'
        - in: query
          name: pageSize
          required: true
          schema:
            default: 10
            type: integer
            enum:
              - 10
              - 50
              - 100
            description: Size of the pages that the results should be partitioned in
        - in: query
          name: page
          required: true
          schema:
            default: 0
            type: integer
            description: The page to return
      responses:
        '200':
          $ref: '#/components/responses/SemanticModelList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - SemanticHub
      operationId: createModelWithUrn
      parameters:
      - in: query
        name: status
        schema:
          $ref: '#/components/schemas/SemanticModelStatus'
      - in: query
        name: type
        required: true
        schema:
          $ref: '#/components/schemas/SemanticModelType'
      requestBody:
        description: >-
          The request body contains all necessary properties to create a new
          model entry.
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '201':
          $ref: '#/components/responses/SemanticModel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - SemanticHub
      operationId: modifyModel
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/SemanticModelStatus'
        - in: query
          name: type
          required: true
          schema:
            $ref: '#/components/schemas/SemanticModelType'
      requestBody:
        description: >-
          The request body contains the updated model.
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          $ref: '#/components/responses/SemanticModel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /models/lookup:
    post:
      tags:
        - SemanticHub
      operationId: getModelListByUrns
      description: This endpoint allows to filter for a specific set of URNs. The endpoint returns the metadata, such as the model status. For URNs that are not in the database there is no entry in the result set. Therefore, a search array with 10 URNs can result in a response containing 9 or less result entries.
      parameters:
        - in: query
          name: pageSize
          required: true
          schema:
            default: 10
            type: integer
            enum:
              - 10
              - 50
              - 100
            description: Size of the pages that the results should be partitioned in
        - in: query
          name: page
          required: true
          schema:
            default: 0
            type: integer
            description: The page to return
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 10000
              items:
                type: string
      responses:
        '200':
          $ref: '#/components/responses/SemanticModelList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/models/{urn}':
    get:
      tags:
        - SemanticHub
      operationId: getModelByUrn
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/SemanticModel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - SemanticHub
      operationId: deleteModel
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
      responses:
        '204':
          description: The resource was deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/models/{urn}/file':
    get:
      tags:
        - SemanticHub
      operationId: getModelFile
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/SemanticModelFile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/models/{urn}/diagram':
    get:
      tags:
        - SemanticHub
      operationId: getModelDiagram
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/SemanticModelDiagram'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/models/{urn}/documentation':
    get:
      tags:
        - SemanticHub
      operationId: getModelDocu
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/SemanticModelDocumentation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/models/{urn}/json-schema':
    get:
      tags:
        - SemanticHub
      operationId: getModelJsonSchema
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/SemanticModelJsonSchema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/models/{urn}/openapi':
    get:
      tags:
        - SemanticHub
      operationId: getModelOpenApi
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
        - in: query
          name: baseUrl
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/ModelOpenApiJson'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/models/{urn}/example-payload':
    get:
      tags:
        - SemanticHub
      operationId: getModelExamplePayloadJson
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/ModelExamplePayloadJson'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/models/{urn}/aas':
    get:
      tags:
        - SemanticHub
      operationId: getAasSubmodelTemplate
      parameters:
        - in: path
          name: urn
          schema:
            type: string
          required: true
        - in: query
          name: aasFormat
          schema:
            $ref: '#/components/schemas/AasFormat'
          required: false
      responses:
        '200':
          $ref: '#/components/responses/AasxSubmodelTemplate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'
    Error:
      type: object
      required:
        - details
      properties:
        message:
          type: string
          example: size must be between {min} and {max}
          description: The detailed error message for the exception which occurred.
          minLength: 1
        path:
          type: string
          description: The requested path.
          minLength: 1
        details:
          type: object
          additionalProperties:
            type: object
          description: An object with key/value pairs containing additional information about the error.
    SemanticModelStatus:
      type: string
      enum:
        - DRAFT
        - RELEASED
        - STANDARDIZED
        - DEPRECATED
    SemanticModelType:
      type: string
      enum:
        - SAMM
        - BAMM
    SemanticModel:
      type: object
      properties:
        urn:
          description: >-
            The urn of a model consists of the model namespace and the Aspect
            name.
          type: string
        version:
          description: >-
            The version of the model. The version can be extracted from the raw
            model.
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/SemanticModelType'
        status:
          $ref: '#/components/schemas/SemanticModelStatus'
    SemanticModelList:
      required:
        - items
        - totalItems
        - currentPage
        - totalPages
        - itemCount
      type: object
      properties:
        items:
          title: Items
          type: array
          maxItems: 10000
          items:
            $ref: '#/components/schemas/SemanticModel'
        totalItems:
          title: Totalitems
          type: integer
        currentPage:
          title: Currentpage
          type: integer
        totalPages:
          title: Totalpages
          type: integer
        itemCount:
          title: Itemcount
          type: integer
    NewSemanticModel:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SemanticModelType'
        status:
          $ref: '#/components/schemas/SemanticModelStatus'
        model:
          description: >-
            The actual model definition in the format defined by the type
            property.
          type: string
    AasFormat:
      type: string
      default: XML
      enum:
        - FILE
        - XML
  responses:
    SemanticModelJsonSchema:
      description: OK
      content:
        'application/schema+json':
          example: >
            {
              "$schema": "http://json-schema.org/draft-04/schema",
              "type": "object",
              "components": {
                "schemas": {
                  "urn_bamm_net.catenax_1.0.0_TestCharacteristic": {
                    "type": "string"
                  }
                }
              },
              "properties": {
                "testProperty": {
                  "$ref": "#/components/schemas/urn_bamm_net.catenax_1.0.0_TestCharacteristic"
                }
              },
              "required": [
                "testProperty"
              ]
            }
    SemanticModelDiagram:
      description: OK
      content:
        image/png:
          schema:
            type: string
            format: binary
    AasxSubmodelTemplate:
      description: OK
      content:
        application/xml:
          schema:
            type: string
        application/octet-stream:
          schema:
            type: string
            format: binary


    SemanticModelDocumentation:
      description: OK
      content:
        text/html:
          example: |
            <!DOCTYPE html>
            <html>
            <head>
            </head>
            <body>
              Aspect Description
            </body>
            </html>
    SemanticModelFile:
      description: The raw RDF based model definition.
      content:
        text/turtle:
          example: >
            @prefix : <urn:samm:net.catenax.semantics:1.0.0#> .

            @prefix samm: <urn:samm:org.eclipse.esmf.samm:meta-model:1.0.0#> .

            @prefix bamm-c:
            <urn:samm:org.eclipse.esmf.samm:characteristic:1.0.0#> .

            @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .


            :TestAspect a samm:Aspect ;
               samm:name "Test" ;
               samm:preferredName "Test Aspect"@en ;
               samm:description "This is a Test Aspect."@en ;
               samm:properties (  ) ;
               samm:operations (  ) .
    ModelOpenApiJson:
      description: OK
      content:
        application/json:
          example: |
            {}
    ModelExamplePayloadJson:
      description: OK
      content:
        application/json:
          example: |
            {}
    SemanticModel:
      description: The resulting model entry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SemanticModel'
    SemanticModelList:
      description: 'A list of models, matching the provided filter options.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SemanticModelList'
    Unauthorized:
      description: Unauthorized
    BadRequest:
      description: Bad Request
    NotFound:
      description: Not Found
    InternalServerError:
      description: Internal Server Error

  securitySchemes:
    OpenIdProfile:
      type: openIdConnect
      openIdConnectUrl: ../.well-known/openid-configuration